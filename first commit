;Exercise 1.15
(define duple
  (lambda (n x)
    (if (= n 0)
        '()
        (cons x (duple (- n 1) x)))))
(duple 4 '(ha ha))


;Exercise 1.16
(define invert
  (lambda (lst)
    (if (null? lst)
        '()
        (cons (append (cdr (car lst)) (list (car (car lst))))(invert (cdr lst))))))

(invert '((a 1) (a 2) (1 b) (2 b)))

;Exercise 1.17
(define down
  (lambda (lst)
    (if (null? lst)
        '()
        (cons (list(car lst))(down (cdr lst))))))
(down '(a (more (complicated)) object))



        
